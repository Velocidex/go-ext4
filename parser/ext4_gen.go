
package parser

// Autogenerated code from ext4_profile.json. Do not edit.

import (
    "encoding/binary"
    "fmt"
    "bytes"
    "io"
    "sort"
    "strings"
    "unicode/utf16"
    "unicode/utf8"
)

var (
   // Depending on autogenerated code we may use this. Add a reference
   // to shut the compiler up.
   _ = bytes.MinRead
   _ = fmt.Sprintf
   _ = utf16.Decode
   _ = binary.LittleEndian
   _ = utf8.RuneError
   _ = sort.Strings
   _ = strings.Join
   _ = io.Copy
)

func indent(text string) string {
    result := []string{}
    lines := strings.Split(text,"\n")
    for _, line := range lines {
         result = append(result, "  " + line)
    }
    return strings.Join(result, "\n")
}


type EXT4Profile struct {
    Off_Ext4DirEntry_Inode int64
    Off_Ext4DirEntry_RecLen int64
    Off_Ext4DirEntry_NameLen int64
    Off_Ext4DirEntry_FileTypeInt int64
    Off_Ext4DirEntry_FileType int64
    Off_Ext4DirEntry_Name int64
    Off_ExtentEntry_FirstLogicalBlock int64
    Off_ExtentEntry_Length int64
    Off_ExtentEntry_StartHi int64
    Off_ExtentEntry_StartLo int64
    Off_ExtentHeader_Magic int64
    Off_ExtentHeader_EntryCount int64
    Off_ExtentHeader_Max int64
    Off_ExtentHeader_Depth int64
    Off_ExtentHeader_Generation int64
    Off_ExtentHeader__EntryArray int64
    Off_ExtentHeader__IndexEntryArray int64
    Off_ExtentIndex_FirstLogicalBlock int64
    Off_ExtentIndex_LeafLo int64
    Off_ExtentIndex_LeafHi int64
    Off_GroupDescriptor32_BlockBitmapLo int64
    Off_GroupDescriptor32_InodeBitmapLo int64
    Off_GroupDescriptor32_InodeTableLo int64
    Off_GroupDescriptor64_BlockBitmapLo int64
    Off_GroupDescriptor64_InodeBitmapLo int64
    Off_GroupDescriptor64_InodeTableLo int64
    Off_GroupDescriptor64_BlockBitmapHi int64
    Off_GroupDescriptor64_InodeBitmapHi int64
    Off_GroupDescriptor64_InodeTableHi int64
    Off_Header_Superblock int64
    Off_Inode__Mode int64
    Off_Inode__Uid int64
    Off_Inode__UidHi int64
    Off_Inode__SizeLo int64
    Off_Inode__SizeHi int64
    Off_Inode__BlockPointers int64
    Off_Inode__Atime int64
    Off_Inode__AtimeExtra int64
    Off_Inode__Ctime int64
    Off_Inode__CtimeExtra int64
    Off_Inode__Mtime int64
    Off_Inode__MtimeExtra int64
    Off_Inode__CRtime int64
    Off_Inode__CRtimeExtra int64
    Off_Inode__Dtime int64
    Off_Inode__Gid int64
    Off_Inode__GidHi int64
    Off_Inode__LinksCount int64
    Off_Inode__BlocksLo int64
    Off_Inode__Flags int64
    Off_Misc_GD32 int64
    Off_Misc_GD64 int64
    Off_Superblock_InodeCount int64
    Off_Superblock_BlockCountLo int64
    Off_Superblock_BlockCountHi int64
    Off_Superblock_FirstDataBlock int64
    Off_Superblock_FeatureIncompat int64
    Off_Superblock_FeatureCompat int64
    Off_Superblock_BlockPerGroup int64
    Off_Superblock_InodePerGroup int64
    Off_Superblock_InodeSize int64
    Off_Superblock_LogBlockSize int64
    Off_Superblock_LogGroupPerFlex int64
    Off_Superblock_Magic int64
}

func NewEXT4Profile() *EXT4Profile {
    // Specific offsets can be tweaked to cater for slight version mismatches.
    self := &EXT4Profile{0,4,6,7,7,8,0,4,6,8,0,2,4,6,8,12,12,0,4,8,0,4,8,0,4,8,32,36,40,1024,0,2,120,4,108,40,8,140,12,132,16,136,144,148,20,24,122,26,28,32,0,0,0,4,308,20,96,92,32,40,88,24,372,56}
    return self
}

func (self *EXT4Profile) Ext4DirEntry(reader io.ReaderAt, offset int64) *Ext4DirEntry {
    return &Ext4DirEntry{Reader: reader, Offset: offset, Profile: self}
}

func (self *EXT4Profile) ExtentEntry(reader io.ReaderAt, offset int64) *ExtentEntry {
    return &ExtentEntry{Reader: reader, Offset: offset, Profile: self}
}

func (self *EXT4Profile) ExtentHeader(reader io.ReaderAt, offset int64) *ExtentHeader {
    return &ExtentHeader{Reader: reader, Offset: offset, Profile: self}
}

func (self *EXT4Profile) ExtentIndex(reader io.ReaderAt, offset int64) *ExtentIndex {
    return &ExtentIndex{Reader: reader, Offset: offset, Profile: self}
}

func (self *EXT4Profile) GroupDescriptor32(reader io.ReaderAt, offset int64) *GroupDescriptor32 {
    return &GroupDescriptor32{Reader: reader, Offset: offset, Profile: self}
}

func (self *EXT4Profile) GroupDescriptor64(reader io.ReaderAt, offset int64) *GroupDescriptor64 {
    return &GroupDescriptor64{Reader: reader, Offset: offset, Profile: self}
}

func (self *EXT4Profile) Header(reader io.ReaderAt, offset int64) *Header {
    return &Header{Reader: reader, Offset: offset, Profile: self}
}

func (self *EXT4Profile) Inode_(reader io.ReaderAt, offset int64) *Inode_ {
    return &Inode_{Reader: reader, Offset: offset, Profile: self}
}

func (self *EXT4Profile) Misc(reader io.ReaderAt, offset int64) *Misc {
    return &Misc{Reader: reader, Offset: offset, Profile: self}
}

func (self *EXT4Profile) Superblock(reader io.ReaderAt, offset int64) *Superblock {
    return &Superblock{Reader: reader, Offset: offset, Profile: self}
}


type Ext4DirEntry struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *Ext4DirEntry) Size() int {
    return 0
}

func (self *Ext4DirEntry) Inode() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Ext4DirEntry_Inode + self.Offset)
}

func (self *Ext4DirEntry) RecLen() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_Ext4DirEntry_RecLen + self.Offset)
}

func (self *Ext4DirEntry) NameLen() byte {
   return ParseUint8(self.Reader, self.Profile.Off_Ext4DirEntry_NameLen + self.Offset)
}

func (self *Ext4DirEntry) FileTypeInt() byte {
   return ParseUint8(self.Reader, self.Profile.Off_Ext4DirEntry_FileTypeInt + self.Offset)
}

func (self *Ext4DirEntry) FileType() *Enumeration {
   value := ParseUint8(self.Reader, self.Profile.Off_Ext4DirEntry_FileType + self.Offset)
   name := "Unknown"
   switch value {

      case 1:
         name = "EXT4_FT_REG_FILE"

      case 2:
         name = "EXT4_FT_DIR"

      case 3:
         name = "EXT4_FT_CHRDEV"

      case 4:
         name = "EXT4_FT_BLKDEV"

      case 5:
         name = "EXT4_FT_FIFO"

      case 6:
         name = "EXT4_FT_SOCK"

      case 7:
         name = "EXT4_FT_SYMLINK"
}
   return &Enumeration{Value: uint64(value), Name: name}
}



func (self *Ext4DirEntry) Name() string {
  return ParseTerminatedString(self.Reader, self.Profile.Off_Ext4DirEntry_Name + self.Offset)
}
func (self *Ext4DirEntry) DebugString() string {
    result := fmt.Sprintf("struct Ext4DirEntry @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  Inode: %#0x\n", self.Inode())
    result += fmt.Sprintf("  RecLen: %#0x\n", self.RecLen())
    result += fmt.Sprintf("  NameLen: %#0x\n", self.NameLen())
    result += fmt.Sprintf("  FileTypeInt: %#0x\n", self.FileTypeInt())
    result += fmt.Sprintf("  FileType: %v\n", self.FileType().DebugString())
    result += fmt.Sprintf("  Name: %v\n", string(self.Name()))
    return result
}

type ExtentEntry struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *ExtentEntry) Size() int {
    return 12
}

func (self *ExtentEntry) FirstLogicalBlock() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_ExtentEntry_FirstLogicalBlock + self.Offset)
}

func (self *ExtentEntry) Length() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_ExtentEntry_Length + self.Offset)
}

func (self *ExtentEntry) StartHi() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_ExtentEntry_StartHi + self.Offset)
}

func (self *ExtentEntry) StartLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_ExtentEntry_StartLo + self.Offset)
}
func (self *ExtentEntry) DebugString() string {
    result := fmt.Sprintf("struct ExtentEntry @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  FirstLogicalBlock: %#0x\n", self.FirstLogicalBlock())
    result += fmt.Sprintf("  Length: %#0x\n", self.Length())
    result += fmt.Sprintf("  StartHi: %#0x\n", self.StartHi())
    result += fmt.Sprintf("  StartLo: %#0x\n", self.StartLo())
    return result
}

type ExtentHeader struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *ExtentHeader) Size() int {
    return 12
}

func (self *ExtentHeader) Magic() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_ExtentHeader_Magic + self.Offset)
}

func (self *ExtentHeader) EntryCount() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_ExtentHeader_EntryCount + self.Offset)
}

func (self *ExtentHeader) Max() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_ExtentHeader_Max + self.Offset)
}

func (self *ExtentHeader) Depth() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_ExtentHeader_Depth + self.Offset)
}

func (self *ExtentHeader) Generation() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_ExtentHeader_Generation + self.Offset)
}

func (self *ExtentHeader) _EntryArray() []*ExtentEntry {
   return ParseArray_ExtentEntry(self.Profile, self.Reader, self.Profile.Off_ExtentHeader__EntryArray + self.Offset, 0)
}

func (self *ExtentHeader) _IndexEntryArray() []*ExtentIndex {
   return ParseArray_ExtentIndex(self.Profile, self.Reader, self.Profile.Off_ExtentHeader__IndexEntryArray + self.Offset, 0)
}
func (self *ExtentHeader) DebugString() string {
    result := fmt.Sprintf("struct ExtentHeader @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  Magic: %#0x\n", self.Magic())
    result += fmt.Sprintf("  EntryCount: %#0x\n", self.EntryCount())
    result += fmt.Sprintf("  Max: %#0x\n", self.Max())
    result += fmt.Sprintf("  Depth: %#0x\n", self.Depth())
    result += fmt.Sprintf("  Generation: %#0x\n", self.Generation())
    return result
}

type ExtentIndex struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *ExtentIndex) Size() int {
    return 12
}

func (self *ExtentIndex) FirstLogicalBlock() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_ExtentIndex_FirstLogicalBlock + self.Offset)
}

func (self *ExtentIndex) LeafLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_ExtentIndex_LeafLo + self.Offset)
}

func (self *ExtentIndex) LeafHi() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_ExtentIndex_LeafHi + self.Offset)
}
func (self *ExtentIndex) DebugString() string {
    result := fmt.Sprintf("struct ExtentIndex @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  FirstLogicalBlock: %#0x\n", self.FirstLogicalBlock())
    result += fmt.Sprintf("  LeafLo: %#0x\n", self.LeafLo())
    result += fmt.Sprintf("  LeafHi: %#0x\n", self.LeafHi())
    return result
}

type GroupDescriptor32 struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *GroupDescriptor32) Size() int {
    return 32
}

func (self *GroupDescriptor32) BlockBitmapLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GroupDescriptor32_BlockBitmapLo + self.Offset)
}

func (self *GroupDescriptor32) InodeBitmapLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GroupDescriptor32_InodeBitmapLo + self.Offset)
}

func (self *GroupDescriptor32) InodeTableLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GroupDescriptor32_InodeTableLo + self.Offset)
}
func (self *GroupDescriptor32) DebugString() string {
    result := fmt.Sprintf("struct GroupDescriptor32 @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  BlockBitmapLo: %#0x\n", self.BlockBitmapLo())
    result += fmt.Sprintf("  InodeBitmapLo: %#0x\n", self.InodeBitmapLo())
    result += fmt.Sprintf("  InodeTableLo: %#0x\n", self.InodeTableLo())
    return result
}

type GroupDescriptor64 struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *GroupDescriptor64) Size() int {
    return 64
}

func (self *GroupDescriptor64) BlockBitmapLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GroupDescriptor64_BlockBitmapLo + self.Offset)
}

func (self *GroupDescriptor64) InodeBitmapLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GroupDescriptor64_InodeBitmapLo + self.Offset)
}

func (self *GroupDescriptor64) InodeTableLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GroupDescriptor64_InodeTableLo + self.Offset)
}

func (self *GroupDescriptor64) BlockBitmapHi() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GroupDescriptor64_BlockBitmapHi + self.Offset)
}

func (self *GroupDescriptor64) InodeBitmapHi() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GroupDescriptor64_InodeBitmapHi + self.Offset)
}

func (self *GroupDescriptor64) InodeTableHi() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GroupDescriptor64_InodeTableHi + self.Offset)
}
func (self *GroupDescriptor64) DebugString() string {
    result := fmt.Sprintf("struct GroupDescriptor64 @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  BlockBitmapLo: %#0x\n", self.BlockBitmapLo())
    result += fmt.Sprintf("  InodeBitmapLo: %#0x\n", self.InodeBitmapLo())
    result += fmt.Sprintf("  InodeTableLo: %#0x\n", self.InodeTableLo())
    result += fmt.Sprintf("  BlockBitmapHi: %#0x\n", self.BlockBitmapHi())
    result += fmt.Sprintf("  InodeBitmapHi: %#0x\n", self.InodeBitmapHi())
    result += fmt.Sprintf("  InodeTableHi: %#0x\n", self.InodeTableHi())
    return result
}

type Header struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *Header) Size() int {
    return 0
}

func (self *Header) Superblock() *Superblock {
    return self.Profile.Superblock(self.Reader, self.Profile.Off_Header_Superblock + self.Offset)
}
func (self *Header) DebugString() string {
    result := fmt.Sprintf("struct Header @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  Superblock: {\n%v}\n", indent(self.Superblock().DebugString()))
    return result
}

type Inode_ struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *Inode_) Size() int {
    return 0
}

func (self *Inode_) Mode() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_Inode__Mode + self.Offset)
}

func (self *Inode_) Uid() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_Inode__Uid + self.Offset)
}

func (self *Inode_) UidHi() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_Inode__UidHi + self.Offset)
}

func (self *Inode_) SizeLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__SizeLo + self.Offset)
}

func (self *Inode_) SizeHi() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__SizeHi + self.Offset)
}


func (self *Inode_) BlockPointers() string {
  return ParseString(self.Reader, self.Profile.Off_Inode__BlockPointers + self.Offset, 60)
}

func (self *Inode_) Atime() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__Atime + self.Offset)
}

func (self *Inode_) AtimeExtra() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__AtimeExtra + self.Offset)
}

func (self *Inode_) Ctime() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__Ctime + self.Offset)
}

func (self *Inode_) CtimeExtra() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__CtimeExtra + self.Offset)
}

func (self *Inode_) Mtime() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__Mtime + self.Offset)
}

func (self *Inode_) MtimeExtra() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__MtimeExtra + self.Offset)
}

func (self *Inode_) CRtime() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__CRtime + self.Offset)
}

func (self *Inode_) CRtimeExtra() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__CRtimeExtra + self.Offset)
}

func (self *Inode_) Dtime() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__Dtime + self.Offset)
}

func (self *Inode_) Gid() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_Inode__Gid + self.Offset)
}

func (self *Inode_) GidHi() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_Inode__GidHi + self.Offset)
}

func (self *Inode_) LinksCount() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__LinksCount + self.Offset)
}

func (self *Inode_) BlocksLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Inode__BlocksLo + self.Offset)
}

func (self *Inode_) Flags() *Flags {
   value := ParseUint32(self.Reader, self.Profile.Off_Inode__Flags + self.Offset)
   names := make(map[string]bool)


   if value & 128 != 0 {
      names["NOATIME"] = true
   }

   if value & 8 != 0 {
      names["SYNC"] = true
   }

   if value & 16 != 0 {
      names["IMMUTABLE"] = true
   }

   if value & 32 != 0 {
      names["APPEND"] = true
   }

   if value & 64 != 0 {
      names["NODUMP"] = true
   }

   return &Flags{Value: uint64(value), Names: names}
}

func (self *Inode_) DebugString() string {
    result := fmt.Sprintf("struct Inode_ @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  Mode: %#0x\n", self.Mode())
    result += fmt.Sprintf("  Uid: %#0x\n", self.Uid())
    result += fmt.Sprintf("  UidHi: %#0x\n", self.UidHi())
    result += fmt.Sprintf("  SizeLo: %#0x\n", self.SizeLo())
    result += fmt.Sprintf("  SizeHi: %#0x\n", self.SizeHi())
    result += fmt.Sprintf("  BlockPointers: %v\n", string(self.BlockPointers()))
    result += fmt.Sprintf("  Atime: %#0x\n", self.Atime())
    result += fmt.Sprintf("  AtimeExtra: %#0x\n", self.AtimeExtra())
    result += fmt.Sprintf("  Ctime: %#0x\n", self.Ctime())
    result += fmt.Sprintf("  CtimeExtra: %#0x\n", self.CtimeExtra())
    result += fmt.Sprintf("  Mtime: %#0x\n", self.Mtime())
    result += fmt.Sprintf("  MtimeExtra: %#0x\n", self.MtimeExtra())
    result += fmt.Sprintf("  CRtime: %#0x\n", self.CRtime())
    result += fmt.Sprintf("  CRtimeExtra: %#0x\n", self.CRtimeExtra())
    result += fmt.Sprintf("  Dtime: %#0x\n", self.Dtime())
    result += fmt.Sprintf("  Gid: %#0x\n", self.Gid())
    result += fmt.Sprintf("  GidHi: %#0x\n", self.GidHi())
    result += fmt.Sprintf("  LinksCount: %#0x\n", self.LinksCount())
    result += fmt.Sprintf("  BlocksLo: %#0x\n", self.BlocksLo())
    result += fmt.Sprintf("  Flags: %v\n", self.Flags().DebugString())
    return result
}

type Misc struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *Misc) Size() int {
    return 0
}

func (self *Misc) GD32() []*GroupDescriptor32 {
   return ParseArray_GroupDescriptor32(self.Profile, self.Reader, self.Profile.Off_Misc_GD32 + self.Offset, 0)
}

func (self *Misc) GD64() []*GroupDescriptor64 {
   return ParseArray_GroupDescriptor64(self.Profile, self.Reader, self.Profile.Off_Misc_GD64 + self.Offset, 0)
}
func (self *Misc) DebugString() string {
    result := fmt.Sprintf("struct Misc @ %#x:\n", self.Offset)
    return result
}

type Superblock struct {
    Reader io.ReaderAt
    Offset int64
    Profile *EXT4Profile
}

func (self *Superblock) Size() int {
    return 0
}

func (self *Superblock) InodeCount() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Superblock_InodeCount + self.Offset)
}

func (self *Superblock) BlockCountLo() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Superblock_BlockCountLo + self.Offset)
}

func (self *Superblock) BlockCountHi() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Superblock_BlockCountHi + self.Offset)
}

func (self *Superblock) FirstDataBlock() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Superblock_FirstDataBlock + self.Offset)
}

func (self *Superblock) FeatureIncompat() *Flags {
   value := ParseUint32(self.Reader, self.Profile.Off_Superblock_FeatureIncompat + self.Offset)
   names := make(map[string]bool)


   if value & 128 != 0 {
      names["FEATURE_INCOMPAT_64BIT"] = true
   }

   if value & 16 != 0 {
      names["FEATURE_INCOMPAT_META_BG"] = true
   }

   if value & 65536 != 0 {
      names["FEATURE_INCOMPAT_ENCRYPT"] = true
   }

   return &Flags{Value: uint64(value), Names: names}
}


func (self *Superblock) FeatureCompat() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Superblock_FeatureCompat + self.Offset)
}

func (self *Superblock) BlockPerGroup() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Superblock_BlockPerGroup + self.Offset)
}

func (self *Superblock) InodePerGroup() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Superblock_InodePerGroup + self.Offset)
}

func (self *Superblock) InodeSize() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_Superblock_InodeSize + self.Offset)
}

func (self *Superblock) LogBlockSize() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Superblock_LogBlockSize + self.Offset)
}

func (self *Superblock) LogGroupPerFlex() byte {
   return ParseUint8(self.Reader, self.Profile.Off_Superblock_LogGroupPerFlex + self.Offset)
}

func (self *Superblock) Magic() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_Superblock_Magic + self.Offset)
}
func (self *Superblock) DebugString() string {
    result := fmt.Sprintf("struct Superblock @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  InodeCount: %#0x\n", self.InodeCount())
    result += fmt.Sprintf("  BlockCountLo: %#0x\n", self.BlockCountLo())
    result += fmt.Sprintf("  BlockCountHi: %#0x\n", self.BlockCountHi())
    result += fmt.Sprintf("  FirstDataBlock: %#0x\n", self.FirstDataBlock())
    result += fmt.Sprintf("  FeatureIncompat: %v\n", self.FeatureIncompat().DebugString())
    result += fmt.Sprintf("  FeatureCompat: %#0x\n", self.FeatureCompat())
    result += fmt.Sprintf("  BlockPerGroup: %#0x\n", self.BlockPerGroup())
    result += fmt.Sprintf("  InodePerGroup: %#0x\n", self.InodePerGroup())
    result += fmt.Sprintf("  InodeSize: %#0x\n", self.InodeSize())
    result += fmt.Sprintf("  LogBlockSize: %#0x\n", self.LogBlockSize())
    result += fmt.Sprintf("  LogGroupPerFlex: %#0x\n", self.LogGroupPerFlex())
    result += fmt.Sprintf("  Magic: %#0x\n", self.Magic())
    return result
}

type Enumeration struct {
    Value uint64
    Name  string
}

func (self Enumeration) DebugString() string {
    return fmt.Sprintf("%s (%d)", self.Name, self.Value)
}


type Flags struct {
    Value uint64
    Names  map[string]bool
}

func (self Flags) DebugString() string {
    names := []string{}
    for k, _ := range self.Names {
      names = append(names, k)
    }

    sort.Strings(names)

    return fmt.Sprintf("%d (%s)", self.Value, strings.Join(names, ","))
}

func (self Flags) IsSet(flag string) bool {
    result, _ := self.Names[flag]
    return result
}

func (self Flags) Values() []string {
    result := make([]string, 0, len(self.Names))
    for k, _ := range self.Names {
       result = append(result, k)
    }
    return result
}


func ParseArray_ExtentEntry(profile *EXT4Profile, reader io.ReaderAt, offset int64, count int) []*ExtentEntry {
    result := make([]*ExtentEntry, 0, count)
    for i:=0; i<count; i++ {
      value := profile.ExtentEntry(reader, offset)
      result = append(result, value)
      offset += int64(value.Size())
    }
    return result
}

func ParseArray_ExtentIndex(profile *EXT4Profile, reader io.ReaderAt, offset int64, count int) []*ExtentIndex {
    result := make([]*ExtentIndex, 0, count)
    for i:=0; i<count; i++ {
      value := profile.ExtentIndex(reader, offset)
      result = append(result, value)
      offset += int64(value.Size())
    }
    return result
}

func ParseArray_GroupDescriptor32(profile *EXT4Profile, reader io.ReaderAt, offset int64, count int) []*GroupDescriptor32 {
    result := make([]*GroupDescriptor32, 0, count)
    for i:=0; i<count; i++ {
      value := profile.GroupDescriptor32(reader, offset)
      result = append(result, value)
      offset += int64(value.Size())
    }
    return result
}

func ParseArray_GroupDescriptor64(profile *EXT4Profile, reader io.ReaderAt, offset int64, count int) []*GroupDescriptor64 {
    result := make([]*GroupDescriptor64, 0, count)
    for i:=0; i<count; i++ {
      value := profile.GroupDescriptor64(reader, offset)
      result = append(result, value)
      offset += int64(value.Size())
    }
    return result
}

func ParseUint16(reader io.ReaderAt, offset int64) uint16 {
	var buf [2]byte
	data := buf[:]
    _, err := reader.ReadAt(data, offset)
    if err != nil {
       return 0
    }
    return binary.LittleEndian.Uint16(data)
}

func ParseUint32(reader io.ReaderAt, offset int64) uint32 {
	var buf [4]byte
	data := buf[:]
    _, err := reader.ReadAt(data, offset)
    if err != nil {
       return 0
    }
    return binary.LittleEndian.Uint32(data)
}

func ParseUint8(reader io.ReaderAt, offset int64) byte {
	var buf [1]byte
	data := buf[:]
    _, err := reader.ReadAt(data, offset)
    if err != nil {
       return 0
    }
    return data[0]
}

func ParseTerminatedString(reader io.ReaderAt, offset int64) string {
   var buf [1024]byte
   data := buf[:]
   n, err := reader.ReadAt(data, offset)
   if err != nil && err != io.EOF {
     return ""
   }
   idx := bytes.Index(data[:n], []byte{0})
   if idx < 0 {
      idx = n
   }
   return string(data[0:idx])
}

func ParseString(reader io.ReaderAt, offset int64, length int64) string {
   data := make([]byte, length)
   n, err := reader.ReadAt(data, offset)
   if err != nil && err != io.EOF {
      return ""
   }
   return string(data[:n])
}


